{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dfdataflow0023"
		},
		"AzureDataLakeStorageAW_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorageAW'"
		},
		"AzureSqlDatabaseAWDW_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseAWDW'"
		},
		"AzureSqlDatabase_aw_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase_aw'"
		},
		"AzureDataLakeStorageAW_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://storageaccountdataflow.dfs.core.windows.net/"
		},
		"AzureKeyVaultDataFactory_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://keyvalutIR.vault.azure.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorageAW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorageAW_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorageAW_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVaultDataFactory')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "key vault storing self-hosted integration runtime",
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVaultDataFactory_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseAWDW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseAWDW_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase_aw')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked service connecting to SQL database with AdventureWorksLT",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_aw_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DedupeFuzzyFlowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "CreateFullName"
						},
						{
							"name": "MapNames"
						},
						{
							"name": "FuzzyMatch"
						},
						{
							"name": "Orig1"
						},
						{
							"name": "SoundexBranch"
						},
						{
							"name": "GroupSoundex"
						},
						{
							"name": "SoundexJoin"
						},
						{
							"name": "PhoneBranch"
						},
						{
							"name": "GroupPhone"
						},
						{
							"name": "PhoneJoin"
						},
						{
							"name": "ZipBranch"
						},
						{
							"name": "GroupZip"
						},
						{
							"name": "ZipJoin"
						},
						{
							"name": "SetConstants"
						},
						{
							"name": "MatchScore"
						},
						{
							"name": "CheckForDupes"
						},
						{
							"name": "FinalResult"
						},
						{
							"name": "inputName"
						},
						{
							"name": "SinkDupes"
						},
						{
							"name": "SinkNotDupes"
						}
					],
					"scriptLines": [
						"input(output(",
						"          {Emp ID} as string,",
						"          {Name Prefix} as string,",
						"          {First Name} as string,",
						"          {Middle Initial} as string,",
						"          {Last Name} as string,",
						"          Gender as string,",
						"          {E Mail} as string,",
						"          {Father's Name} as string,",
						"          {Mother's Name} as string,",
						"          {Mother's Maiden Name} as string,",
						"          {Date of Birth} as string,",
						"          {Time of Birth} as string,",
						"          {Age in Yrs.} as string,",
						"          {Weight in Kgs.} as string,",
						"          {Date of Joining} as string,",
						"          {Quarter of Joining} as string,",
						"          {Half of Joining} as string,",
						"          {Year of Joining} as string,",
						"          {Month of Joining} as string,",
						"          {Month Name of Joining} as string,",
						"          {Short Month} as string,",
						"          {Day of Joining} as string,",
						"          {DOW of Joining} as string,",
						"          {Short DOW} as string,",
						"          {Age in Company (Years)} as string,",
						"          Salary as string,",
						"          {Last % Hike} as string,",
						"          SSN as string,",
						"          {Phone No. } as string,",
						"          {Place Name} as string,",
						"          County as string,",
						"          City as string,",
						"          State as string,",
						"          Zip as string,",
						"          Region as string,",
						"          {User Name} as string,",
						"          Password as string",
						"     ),",
						"     order: 0,",
						"     allowSchemaDrift: true) ~> inputName",
						"inputName derive(fullname = concat({First Name},' ',{Last Name})) ~> CreateFullName",
						"CreateFullName select(mapColumn(",
						"          each(match(instr(lower(name),'phone')>0),",
						"               'phone' = $$),",
						"          each(match(instr(lower(name),'zip')>0),",
						"               'zip' = $$),",
						"          each(match(instr(lower(name),'fullname')>0),",
						"               'fullname' = $$),",
						"          each(match(instr(lower(name),'id')>0),",
						"               'acctnum' = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MapNames",
						"MapNames derive(SoundexValue = soundex(fullname)) ~> FuzzyMatch",
						"FuzzyMatch select(mapColumn(",
						"          acctnum,",
						"          phone,",
						"          zip,",
						"          fullname,",
						"          SoundexValue",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Orig1",
						"FuzzyMatch select(mapColumn(",
						"          phone,",
						"          zip,",
						"          fullname,",
						"          acctnum,",
						"          SoundexValue",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SoundexBranch",
						"Orig1 aggregate(groupBy(SoundexValue),",
						"     soundexmatch = sum(1)) ~> GroupSoundex",
						"GroupSoundex, SoundexBranch join(GroupSoundex@SoundexValue == SoundexBranch@SoundexValue,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SoundexJoin",
						"SoundexJoin select(mapColumn(",
						"          SoundexValue = SoundexBranch@SoundexValue,",
						"          soundexmatch,",
						"          phone,",
						"          zip,",
						"          fullname,",
						"          acctnum",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PhoneBranch",
						"SoundexJoin aggregate(groupBy(phone,",
						"          GroupSoundex@SoundexValue),",
						"     phonematch = sum(1),",
						"          acctnum_agg = last(acctnum)) ~> GroupPhone",
						"GroupPhone, PhoneBranch join(acctnum_agg == acctnum,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PhoneJoin",
						"PhoneJoin select(mapColumn(",
						"          phone = PhoneBranch@phone,",
						"          SoundexValue = PhoneBranch@SoundexValue,",
						"          phonematch,",
						"          soundexmatch,",
						"          zip,",
						"          fullname,",
						"          acctnum",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ZipBranch",
						"PhoneJoin aggregate(groupBy(PhoneBranch@SoundexValue,",
						"          zip),",
						"     zipcount = sum(1),",
						"          acctnum_agg = last(acctnum_agg)) ~> GroupZip",
						"GroupZip, ZipBranch join(acctnum_agg == acctnum,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ZipJoin",
						"ZipJoin derive(soundexweight = 50,",
						"          zipweight = 25,",
						"          phoneweight = 25,",
						"          soundexbool = iif(soundexmatch>1,1,0),",
						"          zipbool = iif(zipcount>1,1,0),",
						"          phonebool = iif(phonematch>1,1,0)) ~> SetConstants",
						"SetConstants derive(matchscore = (soundexbool * soundexweight) + (zipbool * zipweight) + (phonebool * phoneweight)) ~> MatchScore",
						"FinalResult split(matchscore>50,",
						"     disjoint: false) ~> CheckForDupes@(Duplicates, NotDupe)",
						"MatchScore select(mapColumn(",
						"          phone,",
						"          zip = ZipBranch@zip,",
						"          fullname,",
						"          acctnum,",
						"          matchscore",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalResult",
						"CheckForDupes@Duplicates output() ~> SinkDupes",
						"CheckForDupes@NotDupe output() ~> SinkNotDupes"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableAddress')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_aw",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "AddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "StateProvince",
						"type": "nvarchar"
					},
					{
						"name": "CountryRegion",
						"type": "nvarchar"
					},
					{
						"name": "PostalCode",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Address"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_aw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableProduct')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseAWDW",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "ProductSubcategoryKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "EnglishProductName",
						"type": "nvarchar"
					},
					{
						"name": "SpanishProductName",
						"type": "nvarchar"
					},
					{
						"name": "FrenchProductName",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "bit"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "SafetyStockLevel",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ReorderPoint",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "SizeRange",
						"type": "nvarchar"
					},
					{
						"name": "Weight",
						"type": "float",
						"precision": 15
					},
					{
						"name": "DaysToManufacture",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductLine",
						"type": "nchar"
					},
					{
						"name": "DealerPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Class",
						"type": "nchar"
					},
					{
						"name": "Style",
						"type": "nchar"
					},
					{
						"name": "ModelName",
						"type": "nvarchar"
					},
					{
						"name": "LargePhoto",
						"type": "varbinary"
					},
					{
						"name": "EnglishDescription",
						"type": "nvarchar"
					},
					{
						"name": "FrenchDescription",
						"type": "nvarchar"
					},
					{
						"name": "ChineseDescription",
						"type": "nvarchar"
					},
					{
						"name": "ArabicDescription",
						"type": "nvarchar"
					},
					{
						"name": "HebrewDescription",
						"type": "nvarchar"
					},
					{
						"name": "ThaiDescription",
						"type": "nvarchar"
					},
					{
						"name": "GermanDescription",
						"type": "nvarchar"
					},
					{
						"name": "JapaneseDescription",
						"type": "nvarchar"
					},
					{
						"name": "TurkishDescription",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseAWDW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adlsgen2employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageAW",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "originalfiles",
						"fileSystem": "fuzzymatching"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Emp ID",
						"type": "String"
					},
					{
						"name": "Name Prefix",
						"type": "String"
					},
					{
						"name": "First Name",
						"type": "String"
					},
					{
						"name": "Middle Initial",
						"type": "String"
					},
					{
						"name": "Last Name",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "E Mail",
						"type": "String"
					},
					{
						"name": "Father's Name",
						"type": "String"
					},
					{
						"name": "Mother's Name",
						"type": "String"
					},
					{
						"name": "Mother's Maiden Name",
						"type": "String"
					},
					{
						"name": "Date of Birth",
						"type": "String"
					},
					{
						"name": "Time of Birth",
						"type": "String"
					},
					{
						"name": "Age in Yrs.",
						"type": "String"
					},
					{
						"name": "Weight in Kgs.",
						"type": "String"
					},
					{
						"name": "Date of Joining",
						"type": "String"
					},
					{
						"name": "Quarter of Joining",
						"type": "String"
					},
					{
						"name": "Half of Joining",
						"type": "String"
					},
					{
						"name": "Year of Joining",
						"type": "String"
					},
					{
						"name": "Month of Joining",
						"type": "String"
					},
					{
						"name": "Month Name of Joining",
						"type": "String"
					},
					{
						"name": "Short Month",
						"type": "String"
					},
					{
						"name": "Day of Joining",
						"type": "String"
					},
					{
						"name": "DOW of Joining",
						"type": "String"
					},
					{
						"name": "Short DOW",
						"type": "String"
					},
					{
						"name": "Age in Company (Years)",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Last % Hike",
						"type": "String"
					},
					{
						"name": "SSN",
						"type": "String"
					},
					{
						"name": "Phone No. ",
						"type": "String"
					},
					{
						"name": "Place Name",
						"type": "String"
					},
					{
						"name": "County",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "Zip",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "User Name",
						"type": "String"
					},
					{
						"name": "Password",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageAW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adlsgen2exployeededupes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageAW",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "notduplicates",
						"fileSystem": "fuzzymatching"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageAW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adlsgen2exployeedupes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageAW",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "duplicates",
						"fileSystem": "fuzzymatching"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageAW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adlsgen2folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageAW",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Address",
						"fileSystem": "SalesLT"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageAW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adlsgen2newproducts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageAW",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "newproducts"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "ProductNumber",
						"type": "String"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "StandardCost",
						"type": "String"
					},
					{
						"name": "ListPrice",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageAW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AddressQuanlity')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableAddress",
								"type": "DatasetReference"
							},
							"name": "Address1",
							"description": "Add source dataset Address"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "adlsgen2folder",
								"type": "DatasetReference"
							},
							"name": "OutputToADLS"
						}
					],
					"transformations": [
						{
							"name": "MetadataChecker"
						},
						{
							"name": "FailedMetaData"
						},
						{
							"name": "DataQuanlityRules"
						},
						{
							"name": "FilterOutNULLCountry"
						},
						{
							"name": "MakeFullAddress"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Address1",
						"Address1 split(iif(!in(columnNames(),'AddressID'),false(),  iif(!in(columnNames(),'AddressLine1'),false(),  iif(!in(columnNames(),'City'),false(),  iif(!in(columnNames(),'StateProvince'),false(),  iif(!in(columnNames(),'CountryRegion'),false(),  iif(!in(columnNames(),'PostalCode'),false(),true())))))),",
						"     disjoint: false) ~> MetadataChecker@(Pass, Fail)",
						"MetadataChecker@Fail assert(expectTrue(false(), false, 'failedMetadata', null, 'Not all columns present'),",
						"     abort: true) ~> FailedMetaData",
						"MetadataChecker@Pass assert(expectTrue(CountryRegion == 'United States', false, 'assertUsOnly', null, CountryRegion + ' is not valid'),",
						"     expectUnique(AddressID, false, 'addressIdUnique', null, \"ID of {AddressID} is not unique\")) ~> DataQuanlityRules",
						"DataQuanlityRules filter(!isNull(CountryRegion)) ~> FilterOutNULLCountry",
						"FilterOutNULLCountry derive({Full Address} = \"{AddressLine1} {City}, {StateProvince} {PostalCode}\") ~> MakeFullAddress",
						"MakeFullAddress sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> OutputToADLS"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableAddress')]",
				"[concat(variables('factoryId'), '/datasets/adlsgen2folder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeduplicationFuzzyMatching')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "adlsgen2employee",
								"type": "DatasetReference"
							},
							"name": "sourceName"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "adlsgen2exployeedupes",
								"type": "DatasetReference"
							},
							"name": "SinkDupes"
						},
						{
							"dataset": {
								"referenceName": "adlsgen2exployeededupes",
								"type": "DatasetReference"
							},
							"name": "SinkNotDupes"
						}
					],
					"transformations": [
						{
							"name": "CreateFullName"
						},
						{
							"name": "MapNames"
						},
						{
							"name": "FuzzyMatch"
						},
						{
							"name": "Orig1"
						},
						{
							"name": "SoundexBranch"
						},
						{
							"name": "GroupSoundex"
						},
						{
							"name": "SoundexJoin"
						},
						{
							"name": "PhoneBranch"
						},
						{
							"name": "GroupPhone"
						},
						{
							"name": "PhoneJoin"
						},
						{
							"name": "ZipBranch"
						},
						{
							"name": "GroupZip"
						},
						{
							"name": "ZipJoin"
						},
						{
							"name": "SetConstants"
						},
						{
							"name": "MatchScore"
						},
						{
							"name": "CheckForDupes"
						},
						{
							"name": "FinalResult"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Emp ID} as string,",
						"          {Name Prefix} as string,",
						"          {First Name} as string,",
						"          {Middle Initial} as string,",
						"          {Last Name} as string,",
						"          Gender as string,",
						"          {E Mail} as string,",
						"          {Father's Name} as string,",
						"          {Mother's Name} as string,",
						"          {Mother's Maiden Name} as string,",
						"          {Date of Birth} as string,",
						"          {Time of Birth} as string,",
						"          {Age in Yrs.} as string,",
						"          {Weight in Kgs.} as string,",
						"          {Date of Joining} as string,",
						"          {Quarter of Joining} as string,",
						"          {Half of Joining} as string,",
						"          {Year of Joining} as string,",
						"          {Month of Joining} as string,",
						"          {Month Name of Joining} as string,",
						"          {Short Month} as string,",
						"          {Day of Joining} as string,",
						"          {DOW of Joining} as string,",
						"          {Short DOW} as string,",
						"          {Age in Company (Years)} as string,",
						"          Salary as string,",
						"          {Last % Hike} as string,",
						"          SSN as string,",
						"          {Phone No. } as string,",
						"          {Place Name} as string,",
						"          County as string,",
						"          City as string,",
						"          State as string,",
						"          Zip as string,",
						"          Region as string,",
						"          {User Name} as string,",
						"          Password as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceName",
						"sourceName derive(fullname = concat({First Name},' ',{Last Name})) ~> CreateFullName",
						"CreateFullName select(mapColumn(",
						"          each(match(instr(lower(name),'phone')>0),",
						"               'phone' = $$),",
						"          each(match(instr(lower(name),'zip')>0),",
						"               'zip' = $$),",
						"          each(match(instr(lower(name),'fullname')>0),",
						"               'fullname' = $$),",
						"          each(match(instr(lower(name),'id')>0),",
						"               'acctnum' = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MapNames",
						"MapNames derive(SoundexValue = soundex(fullname)) ~> FuzzyMatch",
						"FuzzyMatch select(mapColumn(",
						"          acctnum,",
						"          phone,",
						"          zip,",
						"          fullname,",
						"          SoundexValue",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Orig1",
						"FuzzyMatch select(mapColumn(",
						"          phone,",
						"          zip,",
						"          fullname,",
						"          acctnum,",
						"          SoundexValue",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SoundexBranch",
						"Orig1 aggregate(groupBy(SoundexValue),",
						"     soundexmatch = sum(1)) ~> GroupSoundex",
						"GroupSoundex, SoundexBranch join(GroupSoundex@SoundexValue == SoundexBranch@SoundexValue,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SoundexJoin",
						"SoundexJoin select(mapColumn(",
						"          SoundexValue = SoundexBranch@SoundexValue,",
						"          soundexmatch,",
						"          phone,",
						"          zip,",
						"          fullname,",
						"          acctnum",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PhoneBranch",
						"SoundexJoin aggregate(groupBy(phone,",
						"          GroupSoundex@SoundexValue),",
						"     phonematch = sum(1),",
						"          acctnum_agg = last(acctnum)) ~> GroupPhone",
						"GroupPhone, PhoneBranch join(acctnum_agg == acctnum,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PhoneJoin",
						"PhoneJoin select(mapColumn(",
						"          phone = PhoneBranch@phone,",
						"          SoundexValue = PhoneBranch@SoundexValue,",
						"          phonematch,",
						"          soundexmatch,",
						"          zip,",
						"          fullname,",
						"          acctnum",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ZipBranch",
						"PhoneJoin aggregate(groupBy(PhoneBranch@SoundexValue,",
						"          zip),",
						"     zipcount = sum(1),",
						"          acctnum_agg = last(acctnum_agg)) ~> GroupZip",
						"GroupZip, ZipBranch join(acctnum_agg == acctnum,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ZipJoin",
						"ZipJoin derive(soundexweight = 50,",
						"          zipweight = 25,",
						"          phoneweight = 25,",
						"          soundexbool = iif(soundexmatch>1,1,0),",
						"          zipbool = iif(zipcount>1,1,0),",
						"          phonebool = iif(phonematch>1,1,0)) ~> SetConstants",
						"SetConstants derive(matchscore = (soundexbool * soundexweight) + (zipbool * zipweight) + (phonebool * phoneweight)) ~> MatchScore",
						"FinalResult split(matchscore>50,",
						"     disjoint: false) ~> CheckForDupes@(Duplicates, NotDupe)",
						"MatchScore select(mapColumn(",
						"          phone,",
						"          zip = ZipBranch@zip,",
						"          fullname,",
						"          acctnum,",
						"          matchscore",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalResult",
						"CheckForDupes@Duplicates sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkDupes",
						"CheckForDupes@NotDupe sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkNotDupes"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adlsgen2employee')]",
				"[concat(variables('factoryId'), '/datasets/adlsgen2exployeedupes')]",
				"[concat(variables('factoryId'), '/datasets/adlsgen2exployeededupes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeduplicationFuzzyMatchingFlowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "adlsgen2employee",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "adlsgen2exployeedupes",
								"type": "DatasetReference"
							},
							"name": "Dupe"
						},
						{
							"dataset": {
								"referenceName": "adlsgen2exployeededupes",
								"type": "DatasetReference"
							},
							"name": "NotDupe"
						}
					],
					"transformations": [
						{
							"name": "FuzzyMatching",
							"flowlet": {
								"referenceName": "DedupeFuzzyFlowlet",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Emp ID} as string,",
						"          {Name Prefix} as string,",
						"          {First Name} as string,",
						"          {Middle Initial} as string,",
						"          {Last Name} as string,",
						"          Gender as string,",
						"          {E Mail} as string,",
						"          {Father's Name} as string,",
						"          {Mother's Name} as string,",
						"          {Mother's Maiden Name} as string,",
						"          {Date of Birth} as string,",
						"          {Time of Birth} as string,",
						"          {Age in Yrs.} as string,",
						"          {Weight in Kgs.} as string,",
						"          {Date of Joining} as string,",
						"          {Quarter of Joining} as string,",
						"          {Half of Joining} as string,",
						"          {Year of Joining} as string,",
						"          {Month of Joining} as string,",
						"          {Month Name of Joining} as string,",
						"          {Short Month} as string,",
						"          {Day of Joining} as string,",
						"          {DOW of Joining} as string,",
						"          {Short DOW} as string,",
						"          {Age in Company (Years)} as string,",
						"          Salary as string,",
						"          {Last % Hike} as string,",
						"          SSN as string,",
						"          {Phone No. } as string,",
						"          {Place Name} as string,",
						"          County as string,",
						"          City as string,",
						"          State as string,",
						"          Zip as string,",
						"          Region as string,",
						"          {User Name} as string,",
						"          Password as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source",
						"source compose(mapColumn(",
						"          {Emp ID},",
						"          {Name Prefix} = {Emp ID},",
						"          {First Name} = {Emp ID},",
						"          {Middle Initial} = {Emp ID},",
						"          {Last Name} = {Emp ID},",
						"          Gender = {Emp ID},",
						"          {E Mail} = {Emp ID},",
						"          {Father's Name} = {Emp ID},",
						"          {Mother's Name} = {Emp ID},",
						"          {Mother's Maiden Name} = {Emp ID},",
						"          {Date of Birth} = {Emp ID},",
						"          {Time of Birth} = {Emp ID},",
						"          {Age in Yrs.} = {Emp ID},",
						"          {Weight in Kgs.} = {Emp ID},",
						"          {Date of Joining} = {Emp ID},",
						"          {Quarter of Joining} = {Emp ID},",
						"          {Half of Joining} = {Emp ID},",
						"          {Year of Joining} = {Emp ID},",
						"          {Month of Joining} = {Emp ID},",
						"          {Month Name of Joining} = {Emp ID},",
						"          {Short Month} = {Emp ID},",
						"          {Day of Joining} = {Emp ID},",
						"          {DOW of Joining} = {Emp ID},",
						"          {Short DOW} = {Emp ID},",
						"          {Age in Company (Years)} = {Emp ID},",
						"          Salary = {Emp ID},",
						"          {Last % Hike} = {Emp ID},",
						"          SSN = {Emp ID},",
						"          {Phone No. } = {Emp ID},",
						"          {Place Name} = {Emp ID},",
						"          County = {Emp ID},",
						"          City = {Emp ID},",
						"          State = {Emp ID},",
						"          Zip = {Emp ID},",
						"          Region = {Emp ID},",
						"          {User Name} = {Emp ID},",
						"          Password = {Emp ID}",
						"     ),",
						"     composition: 'DedupeFuzzyFlowlet') ~> FuzzyMatching@(SinkDupes, SinkNotDupes)",
						"FuzzyMatching@SinkDupes sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Dupe",
						"FuzzyMatching@SinkNotDupes sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NotDupe"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DedupeFuzzyFlowlet')]",
				"[concat(variables('factoryId'), '/datasets/adlsgen2employee')]",
				"[concat(variables('factoryId'), '/datasets/adlsgen2exployeedupes')]",
				"[concat(variables('factoryId'), '/datasets/adlsgen2exployeededupes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeduplicationHash')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "adlsgen2employee",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "adlsgen2exployeededupes",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MakeRowHash"
						},
						{
							"name": "DistinctRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Emp ID} as string,",
						"          {Name Prefix} as string,",
						"          {First Name} as string,",
						"          {Middle Initial} as string,",
						"          {Last Name} as string,",
						"          Gender as string,",
						"          {E Mail} as string,",
						"          {Father's Name} as string,",
						"          {Mother's Name} as string,",
						"          {Mother's Maiden Name} as string,",
						"          {Date of Birth} as string,",
						"          {Time of Birth} as string,",
						"          {Age in Yrs.} as string,",
						"          {Weight in Kgs.} as string,",
						"          {Date of Joining} as string,",
						"          {Quarter of Joining} as string,",
						"          {Half of Joining} as string,",
						"          {Year of Joining} as string,",
						"          {Month of Joining} as string,",
						"          {Month Name of Joining} as string,",
						"          {Short Month} as string,",
						"          {Day of Joining} as string,",
						"          {DOW of Joining} as string,",
						"          {Short DOW} as string,",
						"          {Age in Company (Years)} as string,",
						"          Salary as string,",
						"          {Last % Hike} as string,",
						"          SSN as string,",
						"          {Phone No. } as string,",
						"          {Place Name} as string,",
						"          County as string,",
						"          City as string,",
						"          State as string,",
						"          Zip as string,",
						"          Region as string,",
						"          {User Name} as string,",
						"          Password as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(rowhash = sha2(256,columns())) ~> MakeRowHash",
						"MakeRowHash aggregate(groupBy(rowhash),",
						"     each(match(name!='rowhash'), $$ = first($$))) ~> DistinctRows",
						"DistinctRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adlsgen2employee')]",
				"[concat(variables('factoryId'), '/datasets/adlsgen2exployeededupes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDType2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "adlsgen2newproducts",
								"type": "DatasetReference"
							},
							"name": "NewProducts"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableProduct",
								"type": "DatasetReference"
							},
							"name": "ExistingProducts"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableProduct",
								"type": "DatasetReference"
							},
							"name": "LookupMaxKey"
						}
					],
					"sinks": [
						{
							"name": "CacheKey"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableProduct",
								"type": "DatasetReference"
							},
							"name": "DimensionTableUpdate"
						}
					],
					"transformations": [
						{
							"name": "CreateRowHash1"
						},
						{
							"name": "FilterForCurrent"
						},
						{
							"name": "CreateRowHash2"
						},
						{
							"name": "CheckForNewProducts"
						},
						{
							"name": "GenProductKey"
						},
						{
							"name": "AddDimensionColumns"
						},
						{
							"name": "UnionAllData"
						},
						{
							"name": "FilterForExistingProducts"
						},
						{
							"name": "ObsoleteRow"
						},
						{
							"name": "MarkAsUpdate"
						},
						{
							"name": "RemoveRowHash1"
						},
						{
							"name": "RemoveRowHash2"
						},
						{
							"name": "MarkAsInsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as string,",
						"          ListPrice as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     wildcardPaths:['today/*.csv']) ~> NewProducts",
						"source(output(",
						"          ProductKey as integer,",
						"          ProductNumber as string,",
						"          Name as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          StartDate as timestamp,",
						"          EndDate as timestamp,",
						"          Active as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'REPEATABLE_READ',",
						"     format: 'table') ~> ExistingProducts",
						"source(output(",
						"          maxkey as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select max (ProductKey) as maxkey from dbo.DimProduct',",
						"     format: 'query') ~> LookupMaxKey",
						"NewProducts derive(RowHash1 = md5(Name,Color,StandardCost,ListPrice),",
						"          StandardCost = toDecimal(StandardCost),",
						"          ListPrice = toDecimal(ListPrice)) ~> CreateRowHash1",
						"ExistingProducts filter(Active==1) ~> FilterForCurrent",
						"FilterForCurrent derive(RowHash2 = md5(Name,Color,StandardCost,ListPrice)) ~> CreateRowHash2",
						"CreateRowHash1, CreateRowHash2 exists(NewProducts@ProductNumber== ExistingProducts@ProductNumber && RowHash1 == ",
						"RowHash2 /* Ignore rows that are identical */,",
						"     negate:true,",
						"     broadcast: 'left')~> CheckForNewProducts",
						"CheckForNewProducts keyGenerate(output(ProductKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> GenProductKey",
						"GenProductKey derive(ProductKey = ProductKey+toInteger(CacheKey#output().maxkey),",
						"          Active = 1,",
						"          StartDate = currentUTC(),",
						"          EndDate = toTimestamp(null())) ~> AddDimensionColumns",
						"MarkAsInsert, MarkAsUpdate union(byName: true)~> UnionAllData",
						"CreateRowHash2, CreateRowHash1 exists(NewProducts@ProductNumber== ExistingProducts@ProductNumber && RowHash1 != ",
						"RowHash2 /* Ignore rows that are identical */,",
						"     negate:false,",
						"     broadcast: 'right')~> FilterForExistingProducts",
						"FilterForExistingProducts derive(Active = 0,",
						"          EndDate = currentUTC()) ~> ObsoleteRow",
						"RemoveRowHash2 alterRow(updateIf(true())) ~> MarkAsUpdate",
						"AddDimensionColumns select(mapColumn(",
						"          ProductKey,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          StartDate,",
						"          EndDate,",
						"          Active",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveRowHash1",
						"ObsoleteRow select(mapColumn(",
						"          ProductKey,",
						"          ProductNumber,",
						"          Name,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          StartDate,",
						"          EndDate,",
						"          Active",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveRowHash2",
						"RemoveRowHash1 alterRow(insertIf(true())) ~> MarkAsInsert",
						"LookupMaxKey sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> CacheKey",
						"UnionAllData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductKey as integer,",
						"          ProductAlternateKey as string,",
						"          ProductSubcategoryKey as integer,",
						"          WeightUnitMeasureCode as string,",
						"          SizeUnitMeasureCode as string,",
						"          EnglishProductName as string,",
						"          SpanishProductName as string,",
						"          FrenchProductName as string,",
						"          StandardCost as decimal(19,4),",
						"          FinishedGoodsFlag as boolean,",
						"          Color as string,",
						"          SafetyStockLevel as integer,",
						"          ReorderPoint as integer,",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          SizeRange as string,",
						"          Weight as double,",
						"          DaysToManufacture as integer,",
						"          ProductLine as string,",
						"          DealerPrice as decimal(19,4),",
						"          Class as string,",
						"          Style as string,",
						"          ModelName as string,",
						"          LargePhoto as binary,",
						"          EnglishDescription as string,",
						"          FrenchDescription as string,",
						"          ChineseDescription as string,",
						"          ArabicDescription as string,",
						"          HebrewDescription as string,",
						"          ThaiDescription as string,",
						"          GermanDescription as string,",
						"          JapaneseDescription as string,",
						"          TurkishDescription as string,",
						"          StartDate as timestamp,",
						"          EndDate as timestamp,",
						"          Status as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ProductKey'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DimensionTableUpdate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adlsgen2newproducts')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableProduct')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FuzzyMatchingPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "fuzzymatching",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DeduplicationFuzzyMatching",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceName": {},
									"SinkDupes": {},
									"SinkNotDupes": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DeduplicationFuzzyMatching')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDType2Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SCDType2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCDType2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"NewProducts": {},
									"ExistingProducts": {},
									"LookupMaxKey": {},
									"CacheKey": {},
									"DimensionTableUpdate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCDType2')]"
			]
		}
	]
}