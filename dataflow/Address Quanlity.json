{
	"name": "Address Quanlity",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable_address",
						"type": "DatasetReference"
					},
					"name": "Address1",
					"description": "Add source dataset Address"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "MetadataChecker"
				},
				{
					"name": "FailedMetaData"
				},
				{
					"name": "DataQuanlityRules"
				}
			],
			"scriptLines": [
				"parameters{",
				"     parameter1 as string",
				"}",
				"source(output(",
				"          AddressID as integer,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          StateProvince as string,",
				"          CountryRegion as string,",
				"          PostalCode as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Address1",
				"Address1 split(iif(!in(columnNames(),'AddressID'),false(),  iif(!in(columnNames(),'AddressLine1'),false(),  iif(!in(columnNames(),'City'),false(),  iif(!in(columnNames(),'StateProvince'),false(),  iif(!in(columnNames(),'CountryRegion'),false(),  iif(!in(columnNames(),'PostalCode'),false(),true())))))),",
				"     disjoint: false) ~> MetadataChecker@(Pass, Fail)",
				"MetadataChecker@Fail assert(expectTrue(false(), false, 'failedMetadata', null, 'Not all columns present'),",
				"     abort: true) ~> FailedMetaData",
				"MetadataChecker@Pass assert(expectTrue(CountryRegion == 'United States', false, 'assertUsOnly', null, CountryRegion + ' is not valid'),",
				"     expectUnique(ERROR_FUNCTION(''), false, 'addressIdUnique', null, 'ID of ' + AddressID +' is not unique'  )) ~> DataQuanlityRules"
			]
		}
	}
}